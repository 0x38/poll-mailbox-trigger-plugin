task wrapper(type: Wrapper) { gradleVersion = '2.12' }

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jdepend'

apply plugin: 'idea'
apply plugin: 'eclipse'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

// group = "au.com.nickgrealy"

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    //  Uncomment if you want to explicitly use an external JDK (e.g. IBM SDK)
    /*
    options.fork = true
    options.forkOptions.executable = "$jdk6_javac"
    */
}

def setDefault(key, value) {
    if (!project.hasProperty(key)) {
        ext[key] = value
    }
}

setDefault("ignoreFailures", false)

if (ignoreFailures) {
    println """
WARNING: ${project.name} - Ignoring Static Code Analysis Failures
"""
}

if (JavaVersion.current() != JavaVersion.VERSION_1_6) {
    throw new RuntimeException("Please use JDK6. ${JavaVersion.current()} not acceptable.")
}

// turn off html reports... windows can't handle certain cucumber test name characters.
test.reports.getHtml().enabled = false

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    ignoreFailures = project.properties["ignoreFailures"]
    sourceSets = [sourceSets.main]
}

jdepend {
    ignoreFailures = project.properties["ignoreFailures"]
    toolVersion = '2.9.1'
}

findbugs {
    ignoreFailures = project.properties["ignoreFailures"]
    effort = "max"
    toolVersion = '2.0.3'
}

pmd {
    ignoreFailures = project.properties["ignoreFailures"]
}

task showMeCache << {
    configurations.compile.each { println it }
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}
configurations.jdepend.resolutionStrategy {
    force 'jdepend:jdepend:2.9.1'
}

task jenkins() << {
    def tmp = file("$buildDir/jenkins.properties")
    tmp.parentFile.mkdirs()
    tmp << "project.name=${project.name}\nproject.version=${project.version}"
}

